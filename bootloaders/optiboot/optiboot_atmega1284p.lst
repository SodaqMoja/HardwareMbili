
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001fdfe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000ca8  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d41  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0001fc00 <main>:
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
   1fc06:	11 24       	eor	r1, r1
   1fc08:	84 b7       	in	r24, 0x34	; 52
   1fc0a:	14 be       	out	0x34, r1	; 52
   1fc0c:	81 ff       	sbrs	r24, 1
   1fc0e:	ee d0       	rcall	.+476    	; 0x1fdec <appStart>
   1fc10:	85 e0       	ldi	r24, 0x05	; 5
   1fc12:	80 93 81 00 	sts	0x0081, r24
   1fc16:	82 e0       	ldi	r24, 0x02	; 2
   1fc18:	80 93 c0 00 	sts	0x00C0, r24
   1fc1c:	88 e1       	ldi	r24, 0x18	; 24
   1fc1e:	80 93 c1 00 	sts	0x00C1, r24
   1fc22:	96 e0       	ldi	r25, 0x06	; 6
   1fc24:	90 93 c2 00 	sts	0x00C2, r25
   1fc28:	90 e1       	ldi	r25, 0x10	; 16
   1fc2a:	90 93 c4 00 	sts	0x00C4, r25
   1fc2e:	80 93 60 00 	sts	0x0060, r24
   1fc32:	8e e0       	ldi	r24, 0x0E	; 14
   1fc34:	80 93 60 00 	sts	0x0060, r24
   1fc38:	20 9a       	sbi	0x04, 0	; 4
   1fc3a:	26 e0       	ldi	r18, 0x06	; 6
   1fc3c:	88 e1       	ldi	r24, 0x18	; 24
   1fc3e:	9e ef       	ldi	r25, 0xFE	; 254
   1fc40:	31 e0       	ldi	r19, 0x01	; 1
   1fc42:	90 93 85 00 	sts	0x0085, r25
   1fc46:	80 93 84 00 	sts	0x0084, r24
   1fc4a:	36 bb       	out	0x16, r19	; 22
   1fc4c:	b0 9b       	sbis	0x16, 0	; 22
   1fc4e:	fe cf       	rjmp	.-4      	; 0x1fc4c <main+0x4c>
   1fc50:	18 9a       	sbi	0x03, 0	; 3
   1fc52:	a8 95       	wdr
   1fc54:	21 50       	subi	r18, 0x01	; 1
   1fc56:	a9 f7       	brne	.-22     	; 0x1fc42 <main+0x42>
   1fc58:	81 2c       	mov	r8, r1
   1fc5a:	91 2c       	mov	r9, r1
   1fc5c:	98 e1       	ldi	r25, 0x18	; 24
   1fc5e:	e9 2e       	mov	r14, r25
   1fc60:	28 e0       	ldi	r18, 0x08	; 8
   1fc62:	d2 2e       	mov	r13, r18
   1fc64:	33 e0       	ldi	r19, 0x03	; 3
   1fc66:	f3 2e       	mov	r15, r19
   1fc68:	cc 24       	eor	r12, r12
   1fc6a:	c3 94       	inc	r12
   1fc6c:	41 e1       	ldi	r20, 0x11	; 17
   1fc6e:	b4 2e       	mov	r11, r20
   1fc70:	98 d0       	rcall	.+304    	; 0x1fda2 <getch>
   1fc72:	81 34       	cpi	r24, 0x41	; 65
   1fc74:	61 f4       	brne	.+24     	; 0x1fc8e <main+0x8e>
   1fc76:	95 d0       	rcall	.+298    	; 0x1fda2 <getch>
   1fc78:	89 83       	std	Y+1, r24	; 0x01
   1fc7a:	9f d0       	rcall	.+318    	; 0x1fdba <verifySpace>
   1fc7c:	89 81       	ldd	r24, Y+1	; 0x01
   1fc7e:	82 38       	cpi	r24, 0x82	; 130
   1fc80:	11 f1       	breq	.+68     	; 0x1fcc6 <main+0xc6>
   1fc82:	81 38       	cpi	r24, 0x81	; 129
   1fc84:	09 f4       	brne	.+2      	; 0x1fc88 <main+0x88>
   1fc86:	7a c0       	rjmp	.+244    	; 0x1fd7c <main+0x17c>
   1fc88:	83 e0       	ldi	r24, 0x03	; 3
   1fc8a:	84 d0       	rcall	.+264    	; 0x1fd94 <putch>
   1fc8c:	80 c0       	rjmp	.+256    	; 0x1fd8e <main+0x18e>
   1fc8e:	82 34       	cpi	r24, 0x42	; 66
   1fc90:	11 f4       	brne	.+4      	; 0x1fc96 <main+0x96>
   1fc92:	84 e1       	ldi	r24, 0x14	; 20
   1fc94:	03 c0       	rjmp	.+6      	; 0x1fc9c <main+0x9c>
   1fc96:	85 34       	cpi	r24, 0x45	; 69
   1fc98:	19 f4       	brne	.+6      	; 0x1fca0 <main+0xa0>
   1fc9a:	85 e0       	ldi	r24, 0x05	; 5
   1fc9c:	9a d0       	rcall	.+308    	; 0x1fdd2 <getNch>
   1fc9e:	77 c0       	rjmp	.+238    	; 0x1fd8e <main+0x18e>
   1fca0:	85 35       	cpi	r24, 0x55	; 85
   1fca2:	69 f4       	brne	.+26     	; 0x1fcbe <main+0xbe>
   1fca4:	7e d0       	rcall	.+252    	; 0x1fda2 <getch>
   1fca6:	88 2e       	mov	r8, r24
   1fca8:	7c d0       	rcall	.+248    	; 0x1fda2 <getch>
   1fcaa:	91 2c       	mov	r9, r1
   1fcac:	98 2a       	or	r9, r24
   1fcae:	89 2d       	mov	r24, r9
   1fcb0:	88 1f       	adc	r24, r24
   1fcb2:	88 27       	eor	r24, r24
   1fcb4:	88 1f       	adc	r24, r24
   1fcb6:	8b bf       	out	0x3b, r24	; 59
   1fcb8:	88 0c       	add	r8, r8
   1fcba:	99 1c       	adc	r9, r9
   1fcbc:	67 c0       	rjmp	.+206    	; 0x1fd8c <main+0x18c>
   1fcbe:	86 35       	cpi	r24, 0x56	; 86
   1fcc0:	21 f4       	brne	.+8      	; 0x1fcca <main+0xca>
   1fcc2:	84 e0       	ldi	r24, 0x04	; 4
   1fcc4:	86 d0       	rcall	.+268    	; 0x1fdd2 <getNch>
   1fcc6:	80 e0       	ldi	r24, 0x00	; 0
   1fcc8:	e0 cf       	rjmp	.-64     	; 0x1fc8a <main+0x8a>
   1fcca:	84 36       	cpi	r24, 0x64	; 100
   1fccc:	09 f0       	breq	.+2      	; 0x1fcd0 <main+0xd0>
   1fcce:	41 c0       	rjmp	.+130    	; 0x1fd52 <main+0x152>
   1fcd0:	68 d0       	rcall	.+208    	; 0x1fda2 <getch>
   1fcd2:	67 d0       	rcall	.+206    	; 0x1fda2 <getch>
   1fcd4:	a8 2e       	mov	r10, r24
   1fcd6:	65 d0       	rcall	.+202    	; 0x1fda2 <getch>
   1fcd8:	81 14       	cp	r8, r1
   1fcda:	80 ee       	ldi	r24, 0xE0	; 224
   1fcdc:	98 06       	cpc	r9, r24
   1fcde:	18 f0       	brcs	.+6      	; 0x1fce6 <main+0xe6>
   1fce0:	00 e0       	ldi	r16, 0x00	; 0
   1fce2:	11 e0       	ldi	r17, 0x01	; 1
   1fce4:	04 c0       	rjmp	.+8      	; 0x1fcee <main+0xee>
   1fce6:	f4 01       	movw	r30, r8
   1fce8:	f7 be       	out	0x37, r15	; 55
   1fcea:	e8 95       	spm
   1fcec:	f9 cf       	rjmp	.-14     	; 0x1fce0 <main+0xe0>
   1fcee:	59 d0       	rcall	.+178    	; 0x1fda2 <getch>
   1fcf0:	f8 01       	movw	r30, r16
   1fcf2:	81 93       	st	Z+, r24
   1fcf4:	8f 01       	movw	r16, r30
   1fcf6:	ae 12       	cpse	r10, r30
   1fcf8:	fa cf       	rjmp	.-12     	; 0x1fcee <main+0xee>
   1fcfa:	81 14       	cp	r8, r1
   1fcfc:	f0 ee       	ldi	r31, 0xE0	; 224
   1fcfe:	9f 06       	cpc	r9, r31
   1fd00:	18 f0       	brcs	.+6      	; 0x1fd08 <main+0x108>
   1fd02:	f4 01       	movw	r30, r8
   1fd04:	f7 be       	out	0x37, r15	; 55
   1fd06:	e8 95       	spm
   1fd08:	58 d0       	rcall	.+176    	; 0x1fdba <verifySpace>
   1fd0a:	07 b6       	in	r0, 0x37	; 55
   1fd0c:	00 fc       	sbrc	r0, 0
   1fd0e:	fd cf       	rjmp	.-6      	; 0x1fd0a <main+0x10a>
   1fd10:	a4 01       	movw	r20, r8
   1fd12:	a0 e0       	ldi	r26, 0x00	; 0
   1fd14:	b1 e0       	ldi	r27, 0x01	; 1
   1fd16:	8c 91       	ld	r24, X
   1fd18:	12 96       	adiw	r26, 0x02	; 2
   1fd1a:	9d 01       	movw	r18, r26
   1fd1c:	21 50       	subi	r18, 0x01	; 1
   1fd1e:	31 09       	sbc	r19, r1
   1fd20:	f9 01       	movw	r30, r18
   1fd22:	20 81       	ld	r18, Z
   1fd24:	90 e0       	ldi	r25, 0x00	; 0
   1fd26:	92 2b       	or	r25, r18
   1fd28:	fa 01       	movw	r30, r20
   1fd2a:	0c 01       	movw	r0, r24
   1fd2c:	c7 be       	out	0x37, r12	; 55
   1fd2e:	e8 95       	spm
   1fd30:	11 24       	eor	r1, r1
   1fd32:	4e 5f       	subi	r20, 0xFE	; 254
   1fd34:	5f 4f       	sbci	r21, 0xFF	; 255
   1fd36:	a1 15       	cp	r26, r1
   1fd38:	f2 e0       	ldi	r31, 0x02	; 2
   1fd3a:	bf 07       	cpc	r27, r31
   1fd3c:	61 f7       	brne	.-40     	; 0x1fd16 <main+0x116>
   1fd3e:	85 e0       	ldi	r24, 0x05	; 5
   1fd40:	f4 01       	movw	r30, r8
   1fd42:	87 bf       	out	0x37, r24	; 55
   1fd44:	e8 95       	spm
   1fd46:	07 b6       	in	r0, 0x37	; 55
   1fd48:	00 fc       	sbrc	r0, 0
   1fd4a:	fd cf       	rjmp	.-6      	; 0x1fd46 <main+0x146>
   1fd4c:	b7 be       	out	0x37, r11	; 55
   1fd4e:	e8 95       	spm
   1fd50:	1e c0       	rjmp	.+60     	; 0x1fd8e <main+0x18e>
   1fd52:	84 37       	cpi	r24, 0x74	; 116
   1fd54:	61 f4       	brne	.+24     	; 0x1fd6e <main+0x16e>
   1fd56:	25 d0       	rcall	.+74     	; 0x1fda2 <getch>
   1fd58:	24 d0       	rcall	.+72     	; 0x1fda2 <getch>
   1fd5a:	18 2f       	mov	r17, r24
   1fd5c:	22 d0       	rcall	.+68     	; 0x1fda2 <getch>
   1fd5e:	2d d0       	rcall	.+90     	; 0x1fdba <verifySpace>
   1fd60:	f4 01       	movw	r30, r8
   1fd62:	87 91       	elpm	r24, Z+
   1fd64:	4f 01       	movw	r8, r30
   1fd66:	16 d0       	rcall	.+44     	; 0x1fd94 <putch>
   1fd68:	11 50       	subi	r17, 0x01	; 1
   1fd6a:	d1 f7       	brne	.-12     	; 0x1fd60 <main+0x160>
   1fd6c:	10 c0       	rjmp	.+32     	; 0x1fd8e <main+0x18e>
   1fd6e:	85 37       	cpi	r24, 0x75	; 117
   1fd70:	39 f4       	brne	.+14     	; 0x1fd80 <main+0x180>
   1fd72:	23 d0       	rcall	.+70     	; 0x1fdba <verifySpace>
   1fd74:	8e e1       	ldi	r24, 0x1E	; 30
   1fd76:	0e d0       	rcall	.+28     	; 0x1fd94 <putch>
   1fd78:	87 e9       	ldi	r24, 0x97	; 151
   1fd7a:	0c d0       	rcall	.+24     	; 0x1fd94 <putch>
   1fd7c:	85 e0       	ldi	r24, 0x05	; 5
   1fd7e:	85 cf       	rjmp	.-246    	; 0x1fc8a <main+0x8a>
   1fd80:	81 35       	cpi	r24, 0x51	; 81
   1fd82:	21 f4       	brne	.+8      	; 0x1fd8c <main+0x18c>
   1fd84:	e0 92 60 00 	sts	0x0060, r14
   1fd88:	d0 92 60 00 	sts	0x0060, r13
   1fd8c:	16 d0       	rcall	.+44     	; 0x1fdba <verifySpace>
   1fd8e:	80 e1       	ldi	r24, 0x10	; 16
   1fd90:	01 d0       	rcall	.+2      	; 0x1fd94 <putch>
   1fd92:	6e cf       	rjmp	.-292    	; 0x1fc70 <main+0x70>

0001fd94 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fd94:	90 91 c0 00 	lds	r25, 0x00C0
   1fd98:	95 ff       	sbrs	r25, 5
   1fd9a:	fc cf       	rjmp	.-8      	; 0x1fd94 <putch>
  UART_UDR = ch;
   1fd9c:	80 93 c6 00 	sts	0x00C6, r24
   1fda0:	08 95       	ret

0001fda2 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fda2:	80 91 c0 00 	lds	r24, 0x00C0
   1fda6:	87 ff       	sbrs	r24, 7
   1fda8:	fc cf       	rjmp	.-8      	; 0x1fda2 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdaa:	80 91 c0 00 	lds	r24, 0x00C0
   1fdae:	84 fd       	sbrc	r24, 4
   1fdb0:	01 c0       	rjmp	.+2      	; 0x1fdb4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdb2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fdb4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fdb8:	08 95       	ret

0001fdba <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fdba:	f3 df       	rcall	.-26     	; 0x1fda2 <getch>
   1fdbc:	80 32       	cpi	r24, 0x20	; 32
   1fdbe:	39 f0       	breq	.+14     	; 0x1fdce <verifySpace+0x14>
   1fdc0:	88 e1       	ldi	r24, 0x18	; 24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdc2:	80 93 60 00 	sts	0x0060, r24
   1fdc6:	88 e0       	ldi	r24, 0x08	; 8
  WDTCSR = x;
   1fdc8:	80 93 60 00 	sts	0x0060, r24
   1fdcc:	ff cf       	rjmp	.-2      	; 0x1fdcc <verifySpace+0x12>
   1fdce:	84 e1       	ldi	r24, 0x14	; 20
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fdd0:	e1 cf       	rjmp	.-62     	; 0x1fd94 <putch>

0001fdd2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fdd2:	cf 93       	push	r28
   1fdd4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fdd6:	e5 df       	rcall	.-54     	; 0x1fda2 <getch>
   1fdd8:	c1 50       	subi	r28, 0x01	; 1
   1fdda:	e9 f7       	brne	.-6      	; 0x1fdd6 <getNch+0x4>
   1fddc:	cf 91       	pop	r28
  verifySpace();
}
   1fdde:	ed cf       	rjmp	.-38     	; 0x1fdba <verifySpace>

0001fde0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fde0:	e0 e6       	ldi	r30, 0x60	; 96
   1fde2:	f0 e0       	ldi	r31, 0x00	; 0
   1fde4:	98 e1       	ldi	r25, 0x18	; 24
   1fde6:	90 83       	st	Z, r25
  WDTCSR = x;
   1fde8:	80 83       	st	Z, r24
   1fdea:	08 95       	ret

0001fdec <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fdec:	28 2e       	mov	r2, r24
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdee:	e0 e6       	ldi	r30, 0x60	; 96
   1fdf0:	f0 e0       	ldi	r31, 0x00	; 0
   1fdf2:	88 e1       	ldi	r24, 0x18	; 24
   1fdf4:	80 83       	st	Z, r24
  WDTCSR = x;
   1fdf6:	10 82       	st	Z, r1
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));

  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
   1fdf8:	ee 27       	eor	r30, r30
   1fdfa:	ff 27       	eor	r31, r31
   1fdfc:	09 94       	ijmp
